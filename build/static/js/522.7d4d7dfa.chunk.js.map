{"version":3,"file":"static/js/522.7d4d7dfa.chunk.js","mappings":"qPAEaA,EAAcC,EAAAA,GAAAA,GAAH,mEAKXC,EAASD,EAAAA,GAAAA,KAAH,6C,SCJJ,SAASE,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QAChC,OACE,SAACJ,EAAD,UACGI,EAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,SAACN,EAAD,wBACA,0BAAOK,KACP,uBAAIC,MAHGF,EADE,KASlB,CCZc,SAASG,IACtB,IAAML,ECAO,WACb,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOR,EAAP,KAAgBS,EAAhB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAoBL,GAASM,MAAK,YAAkB,IAC5CC,EAD2C,EAAdC,QACRb,KAAI,kBAA8B,CAC3DC,GAD6B,EAAGA,GAEhCC,OAF6B,EAAOA,OAGpCC,QAH6B,EAAeA,QAAf,IAK/BK,EAAWI,EACZ,GACF,GAAE,CAACP,IAEGN,CACR,CDhBiBe,GAEhB,OACE,8BACsB,IAAnBf,EAAQgB,QACP,qEAEA,SAACjB,EAAD,CAASC,QAASA,KAIzB,C,8LEbDiB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAER,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,EAAAA,EAAAA,IAAA,mCAAsCC,IADxD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BpB,GAA/B,uFACkBe,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,oBAAiCgB,IADnD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA4BrB,GAA5B,uFACkBe,EAAAA,EAAAA,IAAA,gBACZf,EADY,4BACUgB,EADV,oBADlB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BtB,GAA/B,uFACkBe,EAAAA,EAAAA,IAAA,gBACZf,EADY,4BACUgB,EADV,oBADlB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBT,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACmBQ,EADnB,YADlB,cACCN,EADD,yBAIEA,EAASC,MAJX,kE","sources":["components/Comment/Comment.styled.js","components/Comment/Comment.jsx","page/Reviews.js","hook/UseFetchReviews.js","service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CommentList = styled.ul`\n  list-style: none;\n  max-width: 1000px;\n`;\n\nexport const Author = styled.span`\n  font-weight: 700;\n`;","import PropTypes from 'prop-types';\nimport { CommentList, Author } from './Comment.styled';\n\nexport default function Comment({ reviews }) {\n  return (\n    <CommentList>\n      {reviews.map(({ id, author, content }) => (\n        <li key={id}>\n          <Author>Author: </Author>\n          <span>{author}</span>\n          <p>{content}</p>\n        </li>\n      ))}\n    </CommentList>\n  );\n}\n\nComment.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};","import UseFetchReviews from 'hook/UseFetchReviews';\nimport Comment from 'components/Comment';\n\nexport default function Reviews() {\n  const reviews = UseFetchReviews();\n\n  return (\n    <>\n      {reviews.length === 0 ? (\n        <p>We don`t have any reviews for this movie</p>\n      ) : (\n        <Comment reviews={reviews} />\n      )}\n    </>\n  );\n}","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as API from '../service/api';\n\nexport default function UseFetchReviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    API.getMovieReviews(movieId).then(({ results }) => {\n      const reviewsArr = results.map(({ id, author, content }) => ({\n        id,\n        author,\n        content,\n      }));\n      setReviews(reviewsArr);\n    });\n  }, [movieId]);\n\n  return reviews;\n}","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst ApiKey = '71232cc02b0a0eb890148f92fc2f7287';\n\nexport async function getTrending() {\n  const response = await axios.get(`trending/all/day?api_key=${ApiKey}`);\n  return response.data;\n}\n\nexport async function getMovieDetails(id) {\n  const response = await axios.get(`movie/${id}?api_key=${ApiKey}`);\n  return response.data;\n}\n\nexport async function getMovieCast(id) {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${ApiKey}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${ApiKey}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getMovieByQuery(query) {\n  const response = await axios.get(\n    `search/movie?api_key=${ApiKey}&query=${query}&page=1`\n  );\n  return response.data;\n}"],"names":["CommentList","styled","Author","Comment","reviews","map","id","author","content","Reviews","movieId","useParams","useState","setReviews","useEffect","API","then","reviewsArr","results","UseFetchReviews","length","axios","ApiKey","getTrending","response","data","getMovieDetails","getMovieCast","getMovieReviews","getMovieByQuery","query"],"sourceRoot":""}