{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/goit-react-hw-05-movies/src/components/Comment/Comment.jsx\";\nimport PropTypes from 'prop-types';\nimport { CommentList, Author } from './Comment.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Comment(_ref) {\n  let {\n    reviews\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(CommentList, {\n    children: reviews.map(_ref2 => {\n      let {\n        id,\n        author,\n        content\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(Author, {\n          children: \"Author: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = Comment;\nComment.propTypes = {\n  cast: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired\n  }))\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["/Users/mac/Desktop/goit-react-hw-05-movies/src/components/Comment/Comment.jsx"],"names":["PropTypes","CommentList","Author","Comment","reviews","map","id","author","content","propTypes","cast","arrayOf","shape","number","isRequired","string"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;;AAEA,eAAe,SAASC,OAAT,OAA8B;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AAC3C,sBACE,QAAC,WAAD;AAAA,cACGA,OAAO,CAACC,GAAR,CAAY;AAAA,UAAC;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,MAAN;AAAcC,QAAAA;AAAd,OAAD;AAAA,0BACX;AAAA,gCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOD;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,oBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,SAASF,EAAT;AAAA;AAAA;AAAA;AAAA,cADW;AAAA,KAAZ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;KAZuBH,O;AAcxBA,OAAO,CAACM,SAAR,GAAoB;AAClBC,EAAAA,IAAI,EAAEV,SAAS,CAACW,OAAV,CACJX,SAAS,CAACY,KAAV,CAAgB;AACdN,IAAAA,EAAE,EAAEN,SAAS,CAACa,MAAV,CAAiBC,UADP;AAEdP,IAAAA,MAAM,EAAEP,SAAS,CAACe,MAAV,CAAiBD,UAFX;AAGdN,IAAAA,OAAO,EAAER,SAAS,CAACe,MAAV,CAAiBD;AAHZ,GAAhB,CADI;AADY,CAApB","sourcesContent":["import PropTypes from 'prop-types';\nimport { CommentList, Author } from './Comment.styled';\n\nexport default function Comment({ reviews }) {\n  return (\n    <CommentList>\n      {reviews.map(({ id, author, content }) => (\n        <li key={id}>\n          <Author>Author: </Author>\n          <span>{author}</span>\n          <p>{content}</p>\n        </li>\n      ))}\n    </CommentList>\n  );\n}\n\nComment.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};"]},"metadata":{},"sourceType":"module"}