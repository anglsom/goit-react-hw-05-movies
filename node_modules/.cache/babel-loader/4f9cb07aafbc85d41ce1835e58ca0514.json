{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/goit-react-hw-05-movies/src/page/Details.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport * as API from '../services/api';\nimport Card from 'components/Card';\nimport MyInfo from 'components/MyInfo';\nimport Button from 'components/Button';\nimport Notiflix from 'notiflix';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Details() {\n  _s();\n\n  var _location$state;\n\n  const {\n    movieId\n  } = useParams();\n  const location = useLocation();\n  const backLocation = location === null || location === void 0 ? void 0 : (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.backLocation;\n  const [movie, setMovie] = useState(null);\n  useEffect(() => {\n    API.getMovieDetails(movieId).then(response => {\n      const {\n        poster_path,\n        title,\n        name,\n        vote_average,\n        overview,\n        genres,\n        backdrop_path,\n        release_date\n      } = response;\n      const movieDetails = {\n        img: poster_path !== null && poster_path !== void 0 ? poster_path : backdrop_path,\n        title: title !== null && title !== void 0 ? title : name,\n        vote_average,\n        overview,\n        genres,\n        release_date\n      };\n      setMovie(movieDetails);\n    }).catch(error => {\n      Notiflix.Notify.warning('Sorry, there are no details about this film');\n    });\n  }, [movieId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: movie ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        backLocation: backLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          data: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MyInfo, {\n          backLocation: backLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n      backLocation: backLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Details, \"9hjLHaQNtE8xIL5G4y02U1E2xyo=\", false, function () {\n  return [useParams, useLocation];\n});\n\n_c = Details;\n\nvar _c;\n\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"sources":["/Users/mac/Desktop/goit-react-hw-05-movies/src/page/Details.js"],"names":["useState","useEffect","Outlet","useLocation","useParams","API","Card","MyInfo","Button","Notiflix","Details","movieId","location","backLocation","state","movie","setMovie","getMovieDetails","then","response","poster_path","title","name","vote_average","overview","genres","backdrop_path","release_date","movieDetails","img","catch","error","Notify","warning"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,SAA9B,QAA+C,kBAA/C;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,UAArB;;;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAAA;;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAcP,SAAS,EAA7B;AACA,QAAMQ,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,YAAY,GAAGD,QAAH,aAAGA,QAAH,0CAAGA,QAAQ,CAAEE,KAAb,oDAAG,gBAAiBD,YAAtC;AAEA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,GAAG,CAACY,eAAJ,CAAoBN,OAApB,EACGO,IADH,CACQC,QAAQ,IAAI;AAChB,YAAM;AACJC,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA,IAHI;AAIJC,QAAAA,YAJI;AAKJC,QAAAA,QALI;AAMJC,QAAAA,MANI;AAOJC,QAAAA,aAPI;AAQJC,QAAAA;AARI,UASFR,QATJ;AAWA,YAAMS,YAAY,GAAG;AACnBC,QAAAA,GAAG,EAAET,WAAF,aAAEA,WAAF,cAAEA,WAAF,GAAiBM,aADD;AAEnBL,QAAAA,KAAK,EAAEA,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAWC,IAFG;AAGnBC,QAAAA,YAHmB;AAInBC,QAAAA,QAJmB;AAKnBC,QAAAA,MALmB;AAMnBE,QAAAA;AANmB,OAArB;AASAX,MAAAA,QAAQ,CAACY,YAAD,CAAR;AACD,KAvBH,EAwBGE,KAxBH,CAwBSC,KAAK,IAAI;AACdtB,MAAAA,QAAQ,CAACuB,MAAT,CAAgBC,OAAhB,CAAwB,6CAAxB;AACD,KA1BH;AA2BD,GA5BQ,EA4BN,CAACtB,OAAD,CA5BM,CAAT;AA8BA,sBACE;AAAA,cACGI,KAAK,gBACJ;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,YAAY,EAAEF;AAAtB;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEE;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,YAAY,EAAEF;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cARF;AAAA,oBADI,gBAYJ,QAAC,MAAD;AAAQ,MAAA,YAAY,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA;AAbJ,mBADF;AAkBD;;GAvDuBH,O;UACFN,S,EACHD,W;;;KAFKO,O","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport * as API from '../services/api';\nimport Card from 'components/Card';\nimport MyInfo from 'components/MyInfo';\nimport Button from 'components/Button';\nimport Notiflix from 'notiflix';\n\nexport default function Details() {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLocation = location?.state?.backLocation;\n\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    API.getMovieDetails(movieId)\n      .then(response => {\n        const {\n          poster_path,\n          title,\n          name,\n          vote_average,\n          overview,\n          genres,\n          backdrop_path,\n          release_date,\n        } = response;\n\n        const movieDetails = {\n          img: poster_path ?? backdrop_path,\n          title: title ?? name,\n          vote_average,\n          overview,\n          genres,\n          release_date,\n        };\n\n        setMovie(movieDetails);\n      })\n      .catch(error => {\n        Notiflix.Notify.warning('Sorry, there are no details about this film');\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {movie ? (\n        <>\n          <Button backLocation={backLocation} />\n\n          <div>\n            <Card data={movie} />\n            <MyInfo backLocation={backLocation} />\n          </div>\n\n          <Outlet />\n        </>\n      ) : (\n        <Button backLocation={backLocation} />\n      )}\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}