{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/goit-react-hw-05-movies/src/page/Movies.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport Search from 'components/Search';\nimport * as API from '../service/api';\nimport Film from 'components/Film';\nimport { useSearchParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Movies() {\n  _s();\n\n  var _searchParams$get;\n\n  let [searchParams] = useSearchParams({});\n  const query = (_searchParams$get = searchParams.get('query')) !== null && _searchParams$get !== void 0 ? _searchParams$get : '';\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    API.getMovieByQuery(query).then(_ref => {\n      let {\n        results\n      } = _ref;\n      const moviesArr = results.map(_ref2 => {\n        let {\n          id,\n          original_title,\n          poster_path,\n          backdrop_path,\n          vote_average\n        } = _ref2;\n        return {\n          id,\n          title: original_title,\n          img: poster_path !== null && poster_path !== void 0 ? poster_path : backdrop_path,\n          vote_average\n        };\n      });\n      setMovies(moviesArr);\n    });\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), movies && /*#__PURE__*/_jsxDEV(Film, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Movies, \"kfNpMwZP1NMV1NPnDyBGt1Jm6O4=\", false, function () {\n  return [useSearchParams];\n});\n\n_c = Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/mac/Desktop/goit-react-hw-05-movies/src/page/Movies.js"],"names":["useState","useEffect","Outlet","Search","API","Film","useSearchParams","Movies","searchParams","query","get","movies","setMovies","getMovieByQuery","then","results","moviesArr","map","id","original_title","poster_path","backdrop_path","vote_average","title","img"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,gBAArB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,SAASC,eAAT,QAAgC,kBAAhC;;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAAA;;AAC/B,MAAI,CAACC,YAAD,IAAiBF,eAAe,CAAC,EAAD,CAApC;AACA,QAAMG,KAAK,wBAAGD,YAAY,CAACE,GAAb,CAAiB,OAAjB,CAAH,iEAAgC,EAA3C;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,KAAK,KAAK,EAAd,EAAkB;AAChB;AACD;;AACDL,IAAAA,GAAG,CAACS,eAAJ,CAAoBJ,KAApB,EAA2BK,IAA3B,CAAgC,QAAiB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AAC/C,YAAMC,SAAS,GAAGD,OAAO,CAACE,GAAR,CAChB;AAAA,YAAC;AAAEC,UAAAA,EAAF;AAAMC,UAAAA,cAAN;AAAsBC,UAAAA,WAAtB;AAAmCC,UAAAA,aAAnC;AAAkDC,UAAAA;AAAlD,SAAD;AAAA,eAAuE;AACrEJ,UAAAA,EADqE;AAErEK,UAAAA,KAAK,EAAEJ,cAF8D;AAGrEK,UAAAA,GAAG,EAAEJ,WAAF,aAAEA,WAAF,cAAEA,WAAF,GAAiBC,aAHiD;AAIrEC,UAAAA;AAJqE,SAAvE;AAAA,OADgB,CAAlB;AAQAV,MAAAA,SAAS,CAACI,SAAD,CAAT;AACD,KAVD;AAWD,GAfQ,EAeN,CAACP,KAAD,CAfM,CAAT;AAiBA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,MAAM,iBAAI,QAAC,IAAD;AAAM,MAAA,MAAM,EAAEA;AAAd;AAAA;AAAA;AAAA;AAAA,YAFb;AAAA,kBADF;AAMD;;GA7BuBJ,M;UACDD,e;;;KADCC,M","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport Search from 'components/Search';\nimport * as API from '../service/api';\nimport Film from 'components/Film';\n\nimport { useSearchParams } from 'react-router-dom';\n\nexport default function Movies() {\n  let [searchParams] = useSearchParams({});\n  const query = searchParams.get('query') ?? '';\n\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    API.getMovieByQuery(query).then(({ results }) => {\n      const moviesArr = results.map(\n        ({ id, original_title, poster_path, backdrop_path, vote_average }) => ({\n          id,\n          title: original_title,\n          img: poster_path ?? backdrop_path,\n          vote_average,\n        })\n      );\n      setMovies(moviesArr);\n    });\n  }, [query]);\n\n  return (\n    <>\n      <Search />\n      {movies && <Film movies={movies} />}\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}