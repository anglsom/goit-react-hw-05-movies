{"ast":null,"code":"import _slicedToArray from\"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useParams}from'react-router-dom';import{useState,useEffect}from'react';import*as API from'../service/api';export default function UseFetchCast(){var _useParams=useParams(),movieId=_useParams.movieId;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),cast=_useState2[0],setCast=_useState2[1];useEffect(function(){API.getMovieCast(movieId).then(function(_ref){var cast=_ref.cast;var castArr=cast.map(function(_ref2){var id=_ref2.id,character=_ref2.character,profile_path=_ref2.profile_path,name=_ref2.name;return{id:id,character:character,profile_path:profile_path,name:name};});return setCast(castArr);});},[movieId]);return cast;}","map":{"version":3,"sources":["/Users/mac/Desktop/goit-react-hw-05-movies/src/hook/UseFetchCast.js"],"names":["useParams","useState","useEffect","API","UseFetchCast","movieId","cast","setCast","getMovieCast","then","castArr","map","id","character","profile_path","name"],"mappings":"gIAAA,OAASA,SAAT,KAA0B,kBAA1B,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,gBAArB,CAEA,cAAe,SAASC,CAAAA,YAAT,EAAwB,CACrC,eAAoBJ,SAAS,EAA7B,CAAQK,OAAR,YAAQA,OAAR,CAEA,cAAwBJ,QAAQ,CAAC,IAAD,CAAhC,wCAAOK,IAAP,eAAaC,OAAb,eAEAL,SAAS,CAAC,UAAM,CACdC,GAAG,CAACK,YAAJ,CAAiBH,OAAjB,EAA0BI,IAA1B,CAA+B,cAAc,IAAXH,CAAAA,IAAW,MAAXA,IAAW,CAC3C,GAAMI,CAAAA,OAAO,CAAGJ,IAAI,CAACK,GAAL,CAAS,mBAAGC,CAAAA,EAAH,OAAGA,EAAH,CAAOC,SAAP,OAAOA,SAAP,CAAkBC,YAAlB,OAAkBA,YAAlB,CAAgCC,IAAhC,OAAgCA,IAAhC,OAA4C,CACnEH,EAAE,CAAFA,EADmE,CAEnEC,SAAS,CAATA,SAFmE,CAGnEC,YAAY,CAAZA,YAHmE,CAInEC,IAAI,CAAJA,IAJmE,CAA5C,EAAT,CAAhB,CAMA,MAAOR,CAAAA,OAAO,CAACG,OAAD,CAAd,CACD,CARD,EASD,CAVQ,CAUN,CAACL,OAAD,CAVM,CAAT,CAYA,MAAOC,CAAAA,IAAP,CACD","sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as API from '../service/api';\n\nexport default function UseFetchCast() {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    API.getMovieCast(movieId).then(({ cast }) => {\n      const castArr = cast.map(({ id, character, profile_path, name }) => ({\n        id,\n        character,\n        profile_path,\n        name,\n      }));\n      return setCast(castArr);\n    });\n  }, [movieId]);\n\n  return cast;\n}"]},"metadata":{},"sourceType":"module"}