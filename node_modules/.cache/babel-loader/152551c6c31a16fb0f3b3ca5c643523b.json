{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/regenerator/index.js\";\n\n/**\n * @remix-run/router v1.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: function createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action: action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: location\n      });\n    }\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach(function (route, index) {\n    var meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, function (_, key) {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref11 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref11.pathname,\n      _ref11$search = _ref11.search,\n      search = _ref11$search === void 0 ? \"\" : _ref11$search,\n      _ref11$hash = _ref11.hash,\n      hash = _ref11$hash === void 0 ? \"\" : _ref11$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref12 = _slicedToArray(_ref, 2),\n          key = _ref12[0],\n          value = _ref12[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeys.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n\n      var subscriber = this.subscriber;\n\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        subscriber && subscriber(false);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      subscriber && subscriber(false);\n      return data;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.subscriber = fn;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this3 = this;\n\n      this.controller.abort();\n      this.pendingKeys.forEach(function (v, k) {\n        return _this3.pendingKeys.delete(k);\n      });\n      var subscriber = this.subscriber;\n      subscriber && subscriber(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {\n        var _this4 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this4.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this4.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this4.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeys.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref13 = _slicedToArray(_ref2, 2),\n            key = _ref13[0],\n            value = _ref13[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data) {\n  _classCallCheck(this, ErrorResponse);\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.data = data;\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  var initialScrollRestored = false;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var _getNotFoundMatches = getNotFoundMatches(dataRoutes),\n        matches = _getNotFoundMatches.matches,\n        route = _getNotFoundMatches.route,\n        error = _getNotFoundMatches.error;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n\n\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    var newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, location, historyAction, preventScrollReset;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              location = createLocation(state.location, path, opts && opts.state);\n              historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              _context2.next = 9;\n              return startNavigation(historyAction, location, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace\n              });\n\n            case 9:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _getNotFoundMatches2, notFoundMatches, _route, _error, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 13;\n                break;\n              }\n\n              _getNotFoundMatches2 = getNotFoundMatches(dataRoutes), notFoundMatches = _getNotFoundMatches2.matches, _route = _getNotFoundMatches2.route, _error = _getNotFoundMatches2.error; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n\n            case 13:\n              if (!isHashChangeOnly(state.location, location)) {\n                _context3.next = 16;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n\n            case 16:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 22;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 32;\n              break;\n\n            case 22:\n              if (!(opts && opts.submission)) {\n                _context3.next = 32;\n                break;\n              }\n\n              _context3.next = 25;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n\n            case 25:\n              actionOutput = _context3.sent;\n\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 28;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 28:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              navigation = _extends({\n                state: \"loading\",\n                location: location\n              }, opts.submission);\n              loadingNavigation = navigation;\n\n            case 32:\n              _context3.next = 34;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n            case 34:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 40;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 40:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors\n              });\n\n            case 42:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, redirectNavigation, boundaryMatch;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = _extends({\n                state: \"submitting\",\n                location: location\n              }, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (actionMatch.route.action) {\n                _context4.next = 8;\n                break;\n              }\n\n              result = getMethodNotAllowedResult(location);\n              _context4.next = 13;\n              break;\n\n            case 8:\n              _context4.next = 10;\n              return callLoaderOrAction(\"action\", request, actionMatch);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!request.signal.aborted) {\n                _context4.next = 13;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context4.next = 18;\n                break;\n              }\n\n              redirectNavigation = _extends({\n                state: \"loading\",\n                location: createLocation(state.location, result.location)\n              }, submission);\n              _context4.next = 17;\n              return startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n\n            case 17:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              if (!isErrorResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n\n            case 22:\n              if (!isDeferredResult(result)) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw new Error(\"defer() is not supported in actions\");\n\n            case 24:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, redirectNavigation, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation;\n\n              if (!loadingNavigation) {\n                navigation = {\n                  state: \"loading\",\n                  location: location,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                loadingNavigation = navigation;\n              }\n\n              _getMatchesToLoad = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 7;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches,\n                loaderData: mergeLoaderData(state.loaderData, {}, matches),\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null,\n                actionData: pendingActionData || null\n              });\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 7:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (_ref2) {\n                  var _ref14 = _slicedToArray(_ref2, 1),\n                      key = _ref14[0];\n\n                  var fetcher = state.fetchers.get(key);\n                  var revalidatingFetcher = {\n                    state: \"loading\",\n                    data: fetcher && fetcher.data,\n                    formMethod: undefined,\n                    formAction: undefined,\n                    formEncType: undefined,\n                    formData: undefined\n                  };\n                  state.fetchers.set(key, revalidatingFetcher);\n                });\n                updateState(_extends({\n                  navigation: loadingNavigation,\n                  actionData: pendingActionData || state.actionData || null\n                }, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n\n              pendingNavigationLoadId = ++incrementingLoadId;\n              revalidatingFetchers.forEach(function (_ref3) {\n                var _ref15 = _slicedToArray(_ref3, 1),\n                    key = _ref15[0];\n\n                return fetchControllers.set(key, pendingNavigationController);\n              });\n              _context5.next = 12;\n              return callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 12:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 18;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              revalidatingFetchers.forEach(function (_ref4) {\n                var _ref16 = _slicedToArray(_ref4, 1),\n                    key = _ref16[0];\n\n                return fetchControllers.delete(key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context5.next = 25;\n                break;\n              }\n\n              redirectNavigation = getLoaderRedirect(state, redirect);\n              _context5.next = 24;\n              return startRedirectNavigation(redirect, redirectNavigation, replace);\n\n            case 24:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 25:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 30:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission;\n\n    var match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, routeId, path, match, submission) {\n      var _getMethodNotAllowedR, _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, redirectNavigation, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _redirectNavigation, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (match.route.action) {\n                _context6.next = 6;\n                break;\n              }\n\n              _getMethodNotAllowedR = getMethodNotAllowedResult(path), _error2 = _getMethodNotAllowedR.error;\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              fetcher = _extends({\n                state: \"submitting\"\n              }, submission, {\n                data: existingFetcher && existingFetcher.data\n              });\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createRequest(path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              _context6.next = 15;\n              return callLoaderOrAction(\"action\", fetchRequest, match);\n\n            case 15:\n              actionResult = _context6.sent;\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 19;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 19:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 29;\n                break;\n              }\n\n              fetchControllers.delete(key);\n              fetchRedirectIds.add(key);\n              loadingFetcher = _extends({\n                state: \"loading\"\n              }, submission, {\n                data: undefined\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              redirectNavigation = _extends({\n                state: \"loading\",\n                location: createLocation(state.location, actionResult.location)\n              }, submission);\n              _context6.next = 28;\n              return startRedirectNavigation(actionResult, redirectNavigation);\n\n            case 28:\n              return _context6.abrupt(\"return\");\n\n            case 29:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 32;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 32:\n              if (isDeferredResult(actionResult)) {\n                invariant(false, \"defer() is not supported in actions\");\n              } // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n\n\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createRequest(nextLocation, abortController.signal);\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = _extends({\n                state: \"loading\",\n                data: actionResult.data\n              }, submission);\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined, // No need to send through errors since we short circuit above\n              fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (_ref5) {\n                var _ref17 = _slicedToArray(_ref5, 1),\n                    staleKey = _ref17[0];\n\n                return staleKey !== key;\n              }).forEach(function (_ref6) {\n                var _ref18 = _slicedToArray(_ref6, 1),\n                    staleKey = _ref18[0];\n\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: existingFetcher && existingFetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                fetchControllers.set(staleKey, abortController);\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              _context6.next = 46;\n              return callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 46:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 52;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 52:\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (_ref7) {\n                var _ref19 = _slicedToArray(_ref7, 1),\n                    staleKey = _ref19[0];\n\n                return fetchControllers.delete(staleKey);\n              });\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context6.next = 61;\n                break;\n              }\n\n              _redirectNavigation = getLoaderRedirect(state, redirect);\n              _context6.next = 60;\n              return startRedirectNavigation(redirect, _redirectNavigation);\n\n            case 60:\n              return _context6.abrupt(\"return\");\n\n            case 61:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(key, doneFetcher);\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n                }, didAbortFetchLoads ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n\n            case 66:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x25, _x26, _x27, _x28) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, routeId, path, match) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, redirectNavigation, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n              loadingFetcher = {\n                state: \"loading\",\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                data: existingFetcher && existingFetcher.data\n              };\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createRequest(path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              _context7.next = 9;\n              return callLoaderOrAction(\"loader\", fetchRequest, match);\n\n            case 9:\n              result = _context7.sent;\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 17;\n                break;\n              }\n\n              _context7.next = 13;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 13:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 16:\n              result = _context7.t0;\n\n            case 17:\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 20;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 20:\n              if (!isRedirectResult(result)) {\n                _context7.next = 25;\n                break;\n              }\n\n              redirectNavigation = getLoaderRedirect(state, result);\n              _context7.next = 24;\n              return startRedirectNavigation(result, redirectNavigation);\n\n            case 24:\n              return _context7.abrupt(\"return\");\n\n            case 25:\n              if (!isErrorResult(result)) {\n                _context7.next = 30;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 30:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              doneFetcher = {\n                state: \"idle\",\n                data: result.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n            case 34:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x29, _x30, _x31) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(redirect, navigation, replace) {\n      var redirectHistoryAction;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n\n              invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n              _context8.next = 6;\n              return startNavigation(redirectHistoryAction, navigation.location, {\n                overrideNavigation: navigation\n              });\n\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x32, _x33, _x34, _x35) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(currentMatches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (m) {\n                return callLoaderOrAction(\"loader\", request, m);\n              })), _toConsumableArray(fetchersToLoad.map(function (_ref8) {\n                var _ref20 = _slicedToArray(_ref8, 3),\n                    href = _ref20[1],\n                    match = _ref20[2];\n\n                return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n              }))));\n\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (_ref9) {\n                var _ref21 = _slicedToArray(_ref9, 3),\n                    match = _ref21[2];\n\n                return match;\n              }), fetcherResults, request.signal, true)]);\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator = _createForOfIteratorHelper(keys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n\n    var _iterator2 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator3 = _createForOfIteratorHelper(fetchReloadIds),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n            key = _step3$value[0],\n            id = _step3$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    createHref: createHref,\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n\n  function query(_x36) {\n    return _query.apply(this, arguments);\n  }\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(request) {\n      var _yield$queryImpl, location, result;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return queryImpl(request);\n\n            case 2:\n              _yield$queryImpl = _context10.sent;\n              location = _yield$queryImpl.location;\n              result = _yield$queryImpl.result;\n\n              if (!(result instanceof Response)) {\n                _context10.next = 7;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 7:\n              return _context10.abrupt(\"return\", _extends({\n                location: location\n              }, result));\n\n            case 8:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x37, _x38) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(request, routeId) {\n      var _yield$queryImpl2, result, error, routeData, value;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return queryImpl(request, routeId);\n\n            case 2:\n              _yield$queryImpl2 = _context11.sent;\n              result = _yield$queryImpl2.result;\n\n              if (!(result instanceof Response)) {\n                _context11.next = 6;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 6:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n              if (!(error !== undefined)) {\n                _context11.next = 11;\n                break;\n              }\n\n              if (!isRouteErrorResponse(error)) {\n                _context11.next = 10;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", new Response(error.data, {\n                status: error.status,\n                statusText: error.statusText\n              }));\n\n            case 10:\n              throw error;\n\n            case 11:\n              // Pick off the right state value to return\n              routeData = [result.actionData, result.loaderData].find(function (v) {\n                return v;\n              });\n              value = Object.values(routeData || {})[0];\n\n              if (!isRouteErrorResponse(value)) {\n                _context11.next = 15;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", new Response(value.data, {\n                status: value.status,\n                statusText: value.statusText\n              }));\n\n            case 15:\n              return _context11.abrupt(\"return\", value);\n\n            case 16:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x39, _x40) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, routeId) {\n      var _matchRequest, location, matches, shortCircuitState, _result, result;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _matchRequest = matchRequest(request, routeId), location = _matchRequest.location, matches = _matchRequest.matches, shortCircuitState = _matchRequest.shortCircuitState;\n              _context12.prev = 3;\n\n              if (!shortCircuitState) {\n                _context12.next = 6;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: shortCircuitState\n              });\n\n            case 6:\n              if (!(request.method !== \"GET\")) {\n                _context12.next = 11;\n                break;\n              }\n\n              _context12.next = 9;\n              return submit(request, matches, getTargetMatch(matches, location), routeId != null);\n\n            case 9:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: _result\n              });\n\n            case 11:\n              _context12.next = 13;\n              return loadRouteData(request, matches, routeId != null);\n\n            case 13:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: _extends({}, result, {\n                  actionData: null,\n                  actionHeaders: {}\n                })\n              });\n\n            case 17:\n              _context12.prev = 17;\n              _context12.t0 = _context12[\"catch\"](3);\n\n              if (!(_context12.t0 instanceof Response)) {\n                _context12.next = 21;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: _context12.t0\n              });\n\n            case 21:\n              throw _context12.t0;\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[3, 17]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x41, _x42, _x43, _x44) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, matches, actionMatch, isRouteRequest) {\n      var result, href, method, boundaryMatch, _boundaryMatch, _context13, context;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (actionMatch.route.action) {\n                _context14.next = 5;\n                break;\n              }\n\n              href = createHref(new URL(request.url));\n              result = getMethodNotAllowedResult(href);\n              _context14.next = 11;\n              break;\n\n            case 5:\n              _context14.next = 7;\n              return callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n\n            case 7:\n              result = _context14.sent;\n\n              if (!request.signal.aborted) {\n                _context14.next = 11;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 11:\n              if (!isRedirectResult(result)) {\n                _context14.next = 13;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n\n            case 13:\n              if (!isDeferredResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n\n              throw new Error(\"defer() is not supported in actions\");\n\n            case 15:\n              if (!isRouteRequest) {\n                _context14.next = 20;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context14.next = 19;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error),\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 500,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 19:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 20:\n              if (!isErrorResult(result)) {\n                _context14.next = 26;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              _boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 24;\n              return loadRouteData(request, matches, isRouteRequest, _defineProperty({}, _boundaryMatch.route.id, result.error));\n\n            case 24:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 26:\n              _context14.next = 28;\n              return loadRouteData(request, matches, isRouteRequest);\n\n            case 28:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 30:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x45, _x46, _x47, _x48) {\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request, matches, isRouteRequest, pendingActionError) {\n      var matchesToLoad, results, method, context;\n      return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(function (m) {\n                return m.route.loader;\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 3;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                loaderData: {},\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {}\n              });\n\n            case 3:\n              _context15.next = 5;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (m) {\n                return callLoaderOrAction(\"loader\", request, m, true, isRouteRequest);\n              })));\n\n            case 5:\n              results = _context15.sent;\n\n              if (!request.signal.aborted) {\n                _context15.next = 9;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 9:\n              // Can't do anything with these without the Remix side of things, so just\n              // cancel them for now\n              results.forEach(function (result) {\n                if (isDeferredResult(result)) {\n                  result.deferredData.cancel();\n                }\n              }); // Process and commit output from loaders\n\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches\n              }));\n\n            case 12:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function matchRequest(req, routeId) {\n    var url = new URL(req.url);\n    var location = createLocation(\"\", createPath(url), null, \"default\");\n    var matches = matchRoutes(dataRoutes, location);\n\n    if (matches && routeId) {\n      matches = matches.filter(function (m) {\n        return m.route.id === routeId;\n      });\n    } // Short circuit with a 404 if we match nothing\n\n\n    if (!matches) {\n      var _getNotFoundMatches3 = getNotFoundMatches(dataRoutes),\n          notFoundMatches = _getNotFoundMatches3.matches,\n          route = _getNotFoundMatches3.route,\n          error = _getNotFoundMatches3.error;\n\n      return {\n        location: location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: _defineProperty({}, route.id, error),\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n\n    return {\n      location: location,\n      matches: matches\n    };\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path: path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path: path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path: path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path);\n\n  try {\n    var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path: path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  var _state$navigation = state.navigation,\n      formMethod = _state$navigation.formMethod,\n      formAction = _state$navigation.formAction,\n      formEncType = _state$navigation.formEncType,\n      formData = _state$navigation.formData;\n  var navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    return match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    }) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (_ref10, key) {\n    var _ref24 = _slicedToArray(_ref10, 2),\n        href = _ref24[0],\n        match = _ref24[1]; // This fetcher was cancelled from a prior action submission - force reload\n\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      var shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var currentUrl = createURL(currentLocation);\n  var currentParams = currentMatch.params;\n  var nextUrl = createURL(location);\n  var nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  var defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    var routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl: currentUrl,\n      currentParams: currentParams,\n      nextUrl: nextUrl,\n      nextParams: nextParams\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nfunction callLoaderOrAction(_x49, _x50, _x51, _x52, _x53) {\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(type, request, match, skipRedirects, isRouteRequest) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, data, contentType;\n    return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (skipRedirects === void 0) {\n              skipRedirects = false;\n            }\n\n            if (isRouteRequest === void 0) {\n              isRouteRequest = false;\n            }\n\n            abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n\n            onReject = function onReject() {\n              return reject();\n            };\n\n            request.signal.addEventListener(\"abort\", onReject);\n            _context16.prev = 5;\n            handler = match.route[type];\n            invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n            _context16.next = 10;\n            return Promise.race([handler({\n              request: request,\n              params: match.params\n            }), abortPromise]);\n\n          case 10:\n            result = _context16.sent;\n            _context16.next = 17;\n            break;\n\n          case 13:\n            _context16.prev = 13;\n            _context16.t0 = _context16[\"catch\"](5);\n            resultType = ResultType.error;\n            result = _context16.t0;\n\n          case 17:\n            _context16.prev = 17;\n            request.signal.removeEventListener(\"abort\", onReject);\n            return _context16.finish(17);\n\n          case 20:\n            if (!(result instanceof Response)) {\n              _context16.next = 42;\n              break;\n            }\n\n            // Process redirects\n            status = result.status;\n            location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n            // without unwrapping\n\n            if (!isRouteRequest) {\n              _context16.next = 25;\n              break;\n            }\n\n            throw result;\n\n          case 25:\n            if (!(status >= 300 && status <= 399 && location != null)) {\n              _context16.next = 29;\n              break;\n            }\n\n            if (!skipRedirects) {\n              _context16.next = 28;\n              break;\n            }\n\n            throw result;\n\n          case 28:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n            });\n\n          case 29:\n            contentType = result.headers.get(\"Content-Type\");\n\n            if (!(contentType && contentType.startsWith(\"application/json\"))) {\n              _context16.next = 36;\n              break;\n            }\n\n            _context16.next = 33;\n            return result.json();\n\n          case 33:\n            data = _context16.sent;\n            _context16.next = 39;\n            break;\n\n          case 36:\n            _context16.next = 38;\n            return result.text();\n\n          case 38:\n            data = _context16.sent;\n\n          case 39:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 41;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponse(status, result.statusText, data),\n              headers: result.headers\n            });\n\n          case 41:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 42:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 44;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n\n          case 44:\n            if (!(result instanceof DeferredData)) {\n              _context16.next = 46;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result\n            });\n\n          case 46:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n\n          case 47:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15, null, [[5, 13, 17, 20]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction createRequest(location, signal, submission) {\n  var url = createURL(location).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType,\n        formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator4 = _createForOfIteratorHelper(formData.entries()),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          key = _step4$value[0],\n          value = _step4$value[1];\n\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      searchParams.append(key, value);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, _defineProperty({}, boundaryMatch.route.id, error)); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = _slicedToArray(revalidatingFetchers[index], 3),\n        key = _revalidatingFetchers[0],\n        match = _revalidatingFetchers[2];\n\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(function (match) {\n    var id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || r.path === \"\" || r.path === \"/\";\n  }) || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\n\nfunction getMethodNotAllowedResult(path) {\n  var href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction resolveDeferredResults(_x54, _x55, _x56, _x57, _x58, _x59) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n\n    return _regeneratorRuntime.wrap(function _callee16$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime.wrap(function _loop$(_context17) {\n                while (1) {\n                  switch (_context17.prev = _context17.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index];\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context17.next = 7;\n                        break;\n                      }\n\n                      _context17.next = 7;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 7:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context18.next = 7;\n              break;\n            }\n\n            return _context18.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            index++;\n            _context18.next = 2;\n            break;\n\n          case 7:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x60, _x61, _x62) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime.wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context19.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context19.sent;\n\n            if (!aborted) {\n              _context19.next = 6;\n              break;\n            }\n\n            return _context19.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context19.next = 14;\n              break;\n            }\n\n            _context19.prev = 7;\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context19.prev = 11;\n            _context19.t0 = _context19[\"catch\"](7);\n            return _context19.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context19.t0\n            });\n\n          case 14:\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location) {\n  var base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  var href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","invariant","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","compilePath","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeys","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolve","size","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizeNavigateOptions","submission","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","_extends","handleLoaders","actionMatch","getTargetMatch","result","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","getMatchesToLoad","matchesToLoad","revalidatingFetchers","routeId","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","results","loaderResults","fetcherResults","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","queryImpl","queryRoute","values","routeData","find","method","matchRequest","shortCircuitState","submit","loadRouteData","actionHeaders","isRouteRequest","URL","Location","statusCode","loaderHeaders","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isFetcher","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","type","skipRedirects","onReject","handler","resultType","contentType","text","deferred","toUpperCase","body","Request","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","isRevalidatingLoader","unwrap","resolveData","unwrappedData","getAll","handle","origin"],"sources":["/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@remix-run/router/history.ts","/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@remix-run/router/utils.ts","/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  invariant,\n  isRouteErrorResponse,\n  matchRoutes,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouterMatch] for a revalidating fetcher.load()\n */\ntype RevalidatingFetcher = [string, string, AgnosticDataRouteMatch];\n\n/**\n * Tuple of [href, DataRouteMatch] for an active fetcher.load()\n */\ntype FetchLoadMatch = [string, AgnosticDataRouteMatch];\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(\n        result,\n        redirectNavigation,\n        opts && opts.replace\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        const fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) => callLoaderOrAction(\"loader\", request, m)),\n      ...fetchersToLoad.map(([, href, match]) =>\n        callLoaderOrAction(\"loader\", createRequest(href, request.signal), match)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let { location, result } = await queryImpl(request);\n    if (result instanceof Response) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  async function queryRoute(request: Request, routeId: string): Promise<any> {\n    let { result } = await queryImpl(request, routeId);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // While we always re-throw Responses returned from loaders/actions\n      // directly for route requests and prevent the unwrapping into an\n      // ErrorResponse, we still need this for error cases _prior_ the\n      // execution of the loader/action, such as a 404/405 error.\n      if (isRouteErrorResponse(error)) {\n        return new Response(error.data, {\n          status: error.status,\n          statusText: error.statusText,\n        });\n      }\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText,\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(\n    request: Request,\n    routeId?: string\n  ): Promise<{\n    location: Location;\n    result: Omit<StaticHandlerContext, \"location\"> | Response;\n  }> {\n    invariant(\n      request.method !== \"HEAD\",\n      \"query()/queryRoute() do not support HEAD requests\"\n    );\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    let { location, matches, shortCircuitState } = matchRequest(\n      request,\n      routeId\n    );\n\n    try {\n      if (shortCircuitState) {\n        return { location, result: shortCircuitState };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(\n          request,\n          matches,\n          getTargetMatch(matches, location),\n          routeId != null\n        );\n        return { location, result };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: {\n          ...result,\n          actionData: null,\n          actionHeaders: {},\n        },\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return { location, result: e };\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(pendingActionError || {})[0]\n    ).filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(\"loader\", request, m, true, isRouteRequest)\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function matchRequest(\n    req: Request,\n    routeId?: string\n  ): {\n    location: Location;\n    matches: AgnosticDataRouteMatch[];\n    routeMatch?: AgnosticDataRouteMatch;\n    shortCircuitState?: Omit<StaticHandlerContext, \"location\">;\n  } {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter((m) => m.route.id === routeId);\n    }\n\n    // Short circuit with a 404 if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error,\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {},\n        },\n      };\n    }\n\n    return { location, matches };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  skipRedirects: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(\n      405,\n      \"Method Not Allowed\",\n      `No action found for [${href}]`\n    ),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    !hasNakedIndexQuery(search || \"\")\n  ) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}