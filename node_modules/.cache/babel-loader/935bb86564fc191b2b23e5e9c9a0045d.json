{"ast":null,"code":"import _slicedToArray from\"/Users/mac/Desktop/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useParams}from'react-router-dom';import{useState,useEffect}from'react';import*as API from'../service/api';export default function UseFetchReviews(){var _useParams=useParams(),movieId=_useParams.movieId;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),reviews=_useState2[0],setReviews=_useState2[1];useEffect(function(){API.getMovieReviews(movieId).then(function(_ref){var results=_ref.results;var reviewsArr=results.map(function(_ref2){var id=_ref2.id,author=_ref2.author,content=_ref2.content;return{id:id,author:author,content:content};});setReviews(reviewsArr);});},[movieId]);return reviews;}","map":{"version":3,"sources":["/Users/mac/Desktop/goit-react-hw-05-movies/src/hook/UseFetchReviews.js"],"names":["useParams","useState","useEffect","API","UseFetchReviews","movieId","reviews","setReviews","getMovieReviews","then","results","reviewsArr","map","id","author","content"],"mappings":"gIAAA,OAASA,SAAT,KAA0B,kBAA1B,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,gBAArB,CAEA,cAAe,SAASC,CAAAA,eAAT,EAA2B,CACxC,eAAoBJ,SAAS,EAA7B,CAAQK,OAAR,YAAQA,OAAR,CACA,cAA8BJ,QAAQ,CAAC,EAAD,CAAtC,wCAAOK,OAAP,eAAgBC,UAAhB,eAEAL,SAAS,CAAC,UAAM,CACdC,GAAG,CAACK,eAAJ,CAAoBH,OAApB,EAA6BI,IAA7B,CAAkC,cAAiB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CACjD,GAAMC,CAAAA,UAAU,CAAGD,OAAO,CAACE,GAAR,CAAY,mBAAGC,CAAAA,EAAH,OAAGA,EAAH,CAAOC,MAAP,OAAOA,MAAP,CAAeC,OAAf,OAAeA,OAAf,OAA8B,CAC3DF,EAAE,CAAFA,EAD2D,CAE3DC,MAAM,CAANA,MAF2D,CAG3DC,OAAO,CAAPA,OAH2D,CAA9B,EAAZ,CAAnB,CAKAR,UAAU,CAACI,UAAD,CAAV,CACD,CAPD,EAQD,CATQ,CASN,CAACN,OAAD,CATM,CAAT,CAWA,MAAOC,CAAAA,OAAP,CACD","sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as API from '../service/api';\n\nexport default function UseFetchReviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    API.getMovieReviews(movieId).then(({ results }) => {\n      const reviewsArr = results.map(({ id, author, content }) => ({\n        id,\n        author,\n        content,\n      }));\n      setReviews(reviewsArr);\n    });\n  }, [movieId]);\n\n  return reviews;\n}"]},"metadata":{},"sourceType":"module"}