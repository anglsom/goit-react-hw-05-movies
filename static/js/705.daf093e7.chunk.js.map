{"version":3,"file":"static/js/705.daf093e7.chunk.js","mappings":"sQAEaA,EAAcC,EAAAA,GAAAA,GAAH,oGAOXC,EAAWD,EAAAA,GAAAA,GAAH,mHAMRE,EAAiBF,EAAAA,GAAAA,IAAH,oEAIdG,EAAaH,EAAAA,GAAAA,IAAH,6CAIVI,EAAaJ,EAAAA,GAAAA,IAAH,8DAKVK,EAAiBL,EAAAA,GAAAA,EAAH,8C,SCjBZ,SAASM,EAAT,GAA2B,IAATC,EAAQ,EAARA,KAC/B,OACE,SAACR,EAAD,UACGQ,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACR,UAACX,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CACEU,IACED,EAAY,0CAC2BA,GACnCE,EAENC,IAAKL,OAGT,UAACN,EAAD,YACE,SAACC,EAAD,4BACA,uBAAIM,KACJ,SAACN,EAAD,2BACA,uBAAIK,SAfOD,EADP,KAsBf,CCjCc,SAASO,IACtB,IAAMT,ECAO,WACb,IAAQU,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOZ,EAAP,KAAaa,EAAb,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAiBL,GAASM,MAAK,YAAe,IACtCC,EADqC,EAAXjB,KACXC,KAAI,kBAA4C,CACnEC,GADuB,EAAGA,GAE1BC,UAFuB,EAAOA,UAG9BE,aAHuB,EAAkBA,aAIzCD,KAJuB,EAAgCA,KAAhC,IAMzB,OAAOS,EAAQI,EAChB,GACF,GAAE,CAACP,IAEGV,CACR,CDlBckB,GAEb,OACE,8BACGlB,GAAO,SAACD,EAAD,CAAQC,KAAMA,KAAW,2DAGtC,C,8LETDmB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAER,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,EAAAA,EAAAA,IAAA,mCAAsCC,IADxD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BtB,GAA/B,uFACkBiB,EAAAA,EAAAA,IAAA,gBAAmBjB,EAAnB,oBAAiCkB,IADnD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA4BvB,GAA5B,uFACkBiB,EAAAA,EAAAA,IAAA,gBACZjB,EADY,4BACUkB,EADV,oBADlB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BxB,GAA/B,uFACkBiB,EAAAA,EAAAA,IAAA,gBACZjB,EADY,4BACUkB,EADV,oBADlB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBT,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACmBQ,EADnB,YADlB,cACCN,EADD,yBAIEA,EAASC,MAJX,kE","sources":["components/Actors/Actors.styled.js","components/Actors/Actors.jsx","page/Cast.js","hook/UseFetchCast.js","service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastingList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  margin: -5px;\n`;\n\nexport const CastItem = styled.li`\n  max-width: 150px;\n  border: 1px solid skyblue;\n  border-radius: 5px;\n  margin: 10px;\n`;\nexport const ImageContainer = styled.div`\n  position: relative;\n  overflow: hidden;\n`;\nexport const ActorImage = styled.img`\n  max-width: 148px;\n`;\n\nexport const ActorsInfo = styled.div`\n  padding: 10px;\n  font-size: 14px;\n`;\n\nexport const ActorsInfoName = styled.p`\n  font-weight: bold;\n`;","import PropTypes from 'prop-types';\nimport notImage from '../../images/no-image-available.png';\nimport {\n  CastingList,\n  CastItem,\n  ImageContainer,\n  ActorImage,\n  ActorsInfo,\n  ActorsInfoName,\n} from './Actors.styled';\n\nexport default function Actors({ cast }) {\n  return (\n    <CastingList>\n      {cast.map(({ id, character, name, profile_path }) => (\n        <CastItem key={id}>\n          <ImageContainer>\n            <ActorImage\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : notImage\n              }\n              alt={character}\n            />\n          </ImageContainer>\n          <ActorsInfo>\n            <ActorsInfoName>Actors name:</ActorsInfoName>\n            <p>{name}</p>\n            <ActorsInfoName>Character: </ActorsInfoName>\n            <p>{character}</p>\n          </ActorsInfo>\n        </CastItem>\n      ))}\n    </CastingList>\n  );\n}\n\nActors.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};","import UseFetchCast from 'hook/UseFetchCast';\nimport Actors from 'components/Actors';\n\nexport default function Cast() {\n  const cast = UseFetchCast();\n\n  return (\n    <>\n      {cast ? <Actors cast={cast} /> : <p>There is no cast to this movie</p>}\n    </>\n  );\n}","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as API from '../service/api';\n\nexport default function UseFetchCast() {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    API.getMovieCast(movieId).then(({ cast }) => {\n      const castArr = cast.map(({ id, character, profile_path, name }) => ({\n        id,\n        character,\n        profile_path,\n        name,\n      }));\n      return setCast(castArr);\n    });\n  }, [movieId]);\n\n  return cast;\n}","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst ApiKey = '71232cc02b0a0eb890148f92fc2f7287';\n\nexport async function getTrending() {\n  const response = await axios.get(`trending/all/day?api_key=${ApiKey}`);\n  return response.data;\n}\n\nexport async function getMovieDetails(id) {\n  const response = await axios.get(`movie/${id}?api_key=${ApiKey}`);\n  return response.data;\n}\n\nexport async function getMovieCast(id) {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${ApiKey}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${ApiKey}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getMovieByQuery(query) {\n  const response = await axios.get(\n    `search/movie?api_key=${ApiKey}&query=${query}&page=1`\n  );\n  return response.data;\n}"],"names":["CastingList","styled","CastItem","ImageContainer","ActorImage","ActorsInfo","ActorsInfoName","Actors","cast","map","id","character","name","profile_path","src","notImage","alt","Cast","movieId","useParams","useState","setCast","useEffect","API","then","castArr","UseFetchCast","axios","ApiKey","getTrending","response","data","getMovieDetails","getMovieCast","getMovieReviews","getMovieByQuery","query"],"sourceRoot":""}